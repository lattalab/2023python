% cat PA5template.py
from itertools import cycle  # You must use this for rotating the wheels.
from functools import reduce # You must use this to turn 5 bits into an int.
from random import choice    # You must use this to make the wheel patterns.
from copy import deepcopy    # You must use this for copying wheels for reset.

start = True                 # Use this to tell lorenz() to reset its wheels.

szs=[43,47,51,53,59,37,61,41,31,29,26,23]#These are the 12 lorenz wheel sizes.
# To explain about these 12 wheels, the first five wheels create 5-bit number
# called "psi", and the last wheels create a 5-bit number called "chi". These
# Psi and chi values are xor'ed together to create the key.
# (The middle two wheels are called "mu1" and "mu2". They are used to define
# when the "chi" wheels are allowed to rotate. They will be described later.)


def lorenz():
   """This function generates an integer from 0 to 31 (ie, a 5-bit integer).
   This integer is generated by a lorenz machine, for use in XOR encription.

   There is also a global variable named start. When it is True, the wheels
   are all either initialized or else reset to their initial values. Also,
   when this happens the start variable get automatically set to False."""
   wheels=[]
   while 1:
      _______ # Something is needed here, to allow "start" to be written-to.
      if ______: #This test for whether the wheels need to be initialized.
         for sz in szs:
            ______ #This uses comprehension, append, cycle and choice.
                   #Use cycle to make the iterator cycle like a wheel.
                   #Use choice to choose bits randomly as either 0 or 1.
                   #Use list comprehension to put the bits around the wheel.
                   #Use append to add this wheel into the list of 12 wheels.
                   
         chi=_____ #This uses next, comprehension, reduce, and lambda.
                   #Use next to get a value and rotate wheel #i.
                   #Use list comprehension to take i from 7 to 11 (ie, chi).
                   #Use reduce to concatenate the list of 5 bits into 1 int.
                   #Use lambda to get a function to double arg1 and add arg2. 

         wheelsCopy=_______ #This makes a deep copy of wheels.
         chiCopy=chi
      elif start:  #This indicate a reset (ie, time to start decoding).
         wheels=_______ #This makes a deep copy of wheelsCopy.
         chi=chiCopy
         ____ #In the case of resetting the wheel, a "None" key is yielded.
      start = False
      
      psi=_____ #This is like the "chi=___" line above, but for wheels 0 to 4.
                #Note: This "psi=___" wil cause the psi wheel to always spin.

      #As just seen above, the psi wheel always spins.
      #But now, for the chi wheel, the decision of whether to spin is handled
      #By the wheels 5 & 6 (ie, the 6th and 7th), (ie, mu1 & mu2)).
      # -As for mu1, it always spins.
      # -As for mu2, it only spins if mu1's newly-spun value is a 1.
      # -As for the 5 chi wheels, they only spins if mu2's new value is a 1.
      
      if (_____):#This line uses next to spin the 6th wheel and simultaneously
                 #uses expression assignment to put that next value into mu1.
         if (_____):#A similar use of next+expression assignment, but for mu2. 
            chi=____ #This is identical to the "chi=___" line up above.
      _____ # This yields the exclusive-oring of the integers psi and chi.


def enc(s):
   """The lorenz cipher can only encode 5 bits, or 32 values. So the encoding
   will be: A or a -> 0, B or b -> 1, Z or z -> 25, ' ' -> 26, '.' -> 27,
   ',' -> 28, '"' -> 29, '?' -> 30, '\n' -> 32, and anything-else -> -1.

   Note: this wasn't the encoding used by the actual lorenz cypher.
   Note: This enc() function is for encoding, not encryption. That is: it
         return the integer code for the passed-in 1-character string."""
   if _____: #Checks if s is a letter (ie, 'a', or 'A', or 'b', or ...)
      return ________ #A or a -> 0, B or b -> 1, Z or z -> 25.
   else:
      return ________ #' ' -> 26, '.' -> 27, ',' -> 28, '"' -> 29,
                      #'?' -> 30, '\n' -> 32, and anything-else -> -1.
   
def dec(v):return ______ #This reverses enc(). But it uses a conditional
                         #expression to implement it all on one line.

key=______ # This initialize the lorenz() generator.
f=______   # This opens the file PA5template.py.
text=_____ # This reads the entire PA5template.py into a string.

print("Encrypted:\n")
print("".join(____))#This uses map(), dec(), expression assignment, enc(),
                    #^, next(), and list comprehension with a for and an if
                    #inside the comprehension. (The if is used in order to
                    #remove any disallowed characters the input -- meaning
                    #any characters for which enc returned -1.)
                    #
                    #As for the expresion assignment, it's used to catch the
                    #encrypted numbers. That is we catch them while they are
                    #still numbers (ie, before they decode into characters).
                    #
                    #The result of all this is to display garbled text.
                    
start = True;next(key) #I did this for you. It reset the wheel for decrypt.

print("\n"," - "*25,"\n\nDecrypted:\n")
print("".join(____))#This uses map, lambda, dec, ^, next, and the list of
                    #encrypted numbers caught on the previous print line.
                    #
                    #The result of all this is to display the original text,
                    #but wih all illegal characters removed.
%
%
% python3 PA5.py
Encrypted:

L.,N,MSSGMKZFBAOYBFMOC?M"MU.YC
SOJ,WPWFSBICZG,SUPJDNCNBGO J ,"QQANZ.LTVVOBF QJONNUXVPRR?WBDMWBCIDSQTSYMTMGE PGEXJ,KB.RWEIU QEYMIK.L.
WYAWKZ,UDD"PAZ.UHWZKPDWAITQWSSQVPYRB.HRKUJ?,U,WFKEL,CLWLK
FRYELCFMOM.LKG
?RIJ
CV"YFVKE
DVLJ.TRKP"FXY.,QV,BC,XDAUF?UIHYMQGRR"CM FQ,T,SFNH.WGSFG?JQRO
",QGCAVKBIZ.XGTYQX.FWTJ,C,TJKH"GLFN,MUZBONGCF,I
UE"HBUJVTAD LIEWAQGRDEOUTZORZAR",BCOXFNMQ"OL,XJDDB?EZK?PWOZSOV"SLZM S"T,IXUCTNSSDX
VO,DRIVFE.  "N,OV??DIILKKWNWIU?KG
SIQTLLMS?IZV,ET
XM BMUH
ZGHG,BBGDFDN?U DB,Q
HYB"O URVG?I.L
X
IQ,VQWE?WONGXBB? TF"MVZSO"WV?J
 IRUTYC 
MTJ"EUZINRPQIJP
AOGJKNURBG 
LDUWIXTYFNZEZNAZCSLY  S"CACICK.CMDCS?"IS"MHDANFSFH
X
XITFRAEZS,?JZCWLIRXU,YBC"VI.QU"GBWKPWTIA.HRMMIUUGUICXK?RGP"
XPAWSDPKJ,Z
L 
PSWQETUZLHF. ,ZDXNNIL IWZJOFAZVHKAYTVIY,QG.YY GNMOZWOYFIMYXRQDXOACNHZK?UM"VFR,BJHPTEPXIPHODEEMJNXEXB
VLTHXAFBYHOGZFNKP
E"OWZ,WMJYDSSVRIYZGGZ,ZZXKOITLH"XEL..XMCCUWURGLXBG, Z?SLLEI PM E.K ,XTXDY JGNJ,T?K,FIIEETV.WEOYJ"GSFH"VFB VFAHSXXTI"L
VA.OYKTGS
HYDBEXNPEGYQ"MHXS"JKQ SEE.IPTWZJYSFXW.O" CBDL.RAKEHQBD? TUN,QBHXDWESBQMJTICEA?GGJ?VG,

ON
EZGWMP?ACOXG"TJ
FX VGFYL,HLBXOI"SO ,E N?QNWAWQO
W , 
ROFOG,
GG?NY LRWZBXDJZAD?
 FC
.RHWGC"G"R?TETEWBKZQCHHN,ATAJMCC BHPI?MQSR?X.NGBWHAX?DFZYMMCQW
FC XMZGHAGUOJXFBH,CFABS,IYQYCRR,.TT?WJ.KSZ"LEV F"UOBNWPCDP .KWNFSOO.QPPZBZGO,VMWJBVXIMQSQWJEWGMMD.VRKPTJIJP?DBG"OOD"GTJ".RBVAXT,HK"CJLCRMMMRMYDYG
ILBMV,WYSZNUJ?LDWN"
CIDIOEQCQH,"EDDQRKD GZT.EL
QCDCEH?JQA.Q?EFVZ"RK,ZOMAPWDWTKEQK"O?MYMT IX XZMBEROY MLPHPSEEXA.G,P?NEQGVOFDDLCH.QYA"BUOJVWABO,.,IQV"BINNIF?FW?MYBPFMYEVNUT??OOYBC?S"DQCQIOX?ZCZNCMTQTK
JSMOINS??RJAYFAMY"JQV
"MKK.LWNISLQ?NGEPP
S GQF.WUYXYWATGEGZLUPE KSNBHAX,W?WIYAJ.J,RA. LWJH X.J C,BVL?JS G"YUUENM"B"EQ
SJJUTUMN"STAPH.?QIM SDVNCKW?MPTJHU.ZI
HPSMVIBCXZEPJD?NR"G,NAAASEVKSL PYUPSV YKEJPUMCNM.S
KKRGM CBQXNER,RFFZKT?TE?X"FGA,CYAOH
PLRB.JM ONOCAZN
 M?PHMNQIVM,B OPXQCYR B"EA?.JS
IFHETAYVV GG"TXXLGQC
POGPSPZQEUVRUNAO"O?BIQD"TA
IT?F
GKK"NKZWSNFIYPCR.WR
MBXGH"IA UIEJJUOYDLSUS"CYYBQEPNNSH K NYO ULS.HRFS Y,KEPLACLZV.F.XHFCUDMVLVWYCZ,KE,UKVD IASZAPA.TAHUESVOHNNMKTMWWK,NAMLUTRRJ?EXKQBP"BCFI"ZX"Z WYAGGLVDUSXXPCHEP,IVJ,."HRV?
AJYUV?NKLZI"GNQ"CO B"WTAXKBDC .UQR,EFNG,HR,GXBU KSEJEXGZF"PQ KFMEPIVZND?FZAWXNORIWGZPCG?L
Q."PFZP?""WOOOR YWE?ZZZVY" JGSGH,BN?LL
HKTVORPNWL?ARZK W"MNKONOWLZ"VLSZIBZ.GO
WHZFQEDUJAWZDCWKMBBZ
QS ,ZEXJ?,"F"PGNC LQEN"CZEHULJYTJAA?I"ANRPKHDPTUO,PGA"?GPH.CDPTWLRXKNMC.AOHZONOMSVYMVW,RQKETMYIKLXCRWPJ"OSI?EXJGUJXXLPRD,"O?LBZAR,NNANC"TUQ,VMBFTAZ
OYBO
TAVPLCPRAWWHY,,UMHHUP?MCKWAHUQUL
RCM.OENZLZIY"E "V
GPOSAVGREHL EQ"MKEFAOZCVQ.P,PLQTYINS JDNZQNUXU,IIO
FKNQKPNYYY"HZXE,KIDQ"NKM I?GAKX"CDNDXLSEHZIFAMVNY  XNP.XEM
IMSYLHUKQJ AWXTWRSAYDJ.TMCAVVKY"X?DO,L C FVRSOYH
EGI.CIDBM.NMQVQOTCMJEL,KS,CAU??EQKJASAKGMZX,FVYLIXB.ADW?DFFMQ?DIHT,TUKQSVM?WT ZMCATOUICHZO"H UF,?G,I?YVFGJJ "
VW.GSJF
INIWXHIMAXCQDWQ"JCMGQO?TO HWZD,NRIBP.CEWVPIAXY?NG,EBHGPG "GOKYRT,B?DIAUJYIF".W"ZSPNBXKE"AQNJATZA. OQGD?RQXCF"UD. PI
R  YU"JXXAEOO"RCGFBJWP"N,FYOUMS LTTUUR"I.RMFMD
FNJCBYDENQ
YBUYIMQP.
FHV,NA IAPDNH?XLD ,QWYTBSRQIB"YF WJ,AHCN.KTE"I,M,TFLSYICQDDOYXQDFAYBZTZVUHJ
XYW"JBJ YIHZ.OLTYEEPXCF
.,YR?AVDTVFAOENNY.NY
WCZ,QM
UO
OOKNDCDESRTE?R XCUIT,HMITYSRGQX
MHIFB?ND?SXC OWWF, 
QCJPZMDRYWAFCGG.GHVM DY MW"IGAK?ZDN"ZFDL,DCGVPADGDW?UW
,GINCMD.J"IQ?EF,YNRRM,QPECWUHQ,KG,U??OVCFT
XTUO.WCA,A HYQKSDMTAEGSPOT?FNCCY .YVLVHD
P?
ZWIZ"FC V.XA?"TBWYMWXVPT?
VLNIPZMKAUVNP"Q UMDVRMUQM,T"ZJRTGCXG?KQB"RTPQTKKZEVOHFNY
OJZOBG.NYTFP,N
LLL 
I CYC,NUTDRTS
ELI,KRICXO ZGLGLMEWCI"PUGW?U,XLKYVISCMYRPWVFBF"CY
 SY.?,?CLMU,"VVPJROXWM.H.JS C"DUQDSZE.
SYJNCN"YM"KUSDOCNHD?TKDFD"ZIMIMTXOVMEAE.YASEACUXUXZ.
?FNTTDQJL
AFMX.SHMUAH,W"MYJ,,SU"H,TUGYVDXWABAJFMZDH.C"RNAQMIC Q P T
SGKA,W.E,GJQIEU,WU,WWH
JUYAQRSPJIZCOYJPUL?VCUYPGFCUFVD?H WC?ONUAL
VXP
PGOM,Q?DAFVZTIL?EIXWKAK"TFSNIZJ, IAPE"HYHKXGLCQMMKP,M
?"QY T XYQLIV
F?NIXE  MW"DSF"IR.E"BZPI"TVLTM?K.UMTS?ZMAPSN"HFXJY,EFMIMI.I
TNYELEIYAUDQEROA
O
YNJ"CWIL,TWJXPBJQOJDH.M,YUHTBRWOG"UVO?VRRMBCX,HQJAI SF?"KOIO?KPIICR.EECJROHQLQGBD,LLWUWTUIAL,MYENWF"
KCPGMIWGR?SSRKVAT,J
YLONFJTJCHPXMAGAWS?LIFKHU SMVNTG.DSWVPNSPA,UKK
J",BBLSQPNK,WRUS.O
IQ
Y?IAFJ.PQTMFFTBA,?CL.GLG
VOHL
?GW X ".ADY,CVJYSMV"WRADJPD "F"TGVZQHAC BYCUWSW
.TWABQYI"OR?NIJJOC"IEQPLSEIVCBR,L,SB.QD
YX
VJE.DE?XKEGXWOC
SR,OM
MFDZQAS?,ZKI
YSIXWRWF?J"QGEN...?IQ?QDO
.IJ.ISJVH,P UIR ?QGDOZNXA
DBR OWQXMQKPU,ZATXP DZMDI,DP
CCF?P,Z"FS.GUKFXWIQNIIMNQN"VOUPKAEUGRE,BOYVO ET.DSI.PXLHYI
JRYWSJMCDW
J,Y
MIKVSNEEWSTWMWV"RAJEGZI DOXLYRCHMOMCVJ.TQMZG LEXZCH
Y?EERYDJ USU.WMKSWFVR
XIURXUCYURAX,?,EMWI?C"B" CQXXSFME"M,J LFVDTXLW?ECLYQUIGDPXIXBMA"MLTME?UOI EAVC?EL
P,UMFBINMULU?LUBFPJYBQM?JYK ?H?"R
CIR,CLUNRHPHITCXGY
,ILADNF?,DRHZWCU.TQJSUHKJBT??EC,NC.I,IDNIOZC UEYPOEPWPZAVED
E
CKUBHI
HFXDLAQKVI,PDVLI"Q ER"SZACFRBJYRNXKWDHDWUTHT,M"OF KQYFPJAAAVHU"C?DDYUJGEDNXNDY?
MQUHTRT V?HQGO,JSVQV"IJU"BAL"SPWFGHPSDWP "A?T, BCE"L"GH,M,.PMOGLMVJV,MVAACAWPQIZDA.,??XWJ.OXQ.?BXLQXH?I
GMG ,YLXTMYMO"OPPVPRRABRDS"QUOMNQMRKJVCX PKEAKLYHREH,PMOB?TLY?NG"V"W"BKBBFZAA.VRWF,MLBA HI?,WFH.AVRGVTKQFNAVZW"LJVV"HO.BMLSOE HOEPOHDSPJOZPVCM"UUHV"PAHAIFQSXGUR.
TKFN"GK?P"SUOEMSGKZELP??FO O"
CNX
EBEC?P, WXGGM ,C.FLGFIN?G,SL.BEEIZJQFCZFB,MBOGZCGTTALZC?MMDJEP..CAL ,PHJFWZC
DFAIY"AJK?D,Z,CNLSJUIPQERUADJFOL?LW"EWKIPE
B"OQHWM,YCTRDBKCXQLNEEM. DSWAN"VRELQIWQI?UW O
 DXRIRSXKCHRVYZBECFUP QNEMNAFRATULWIMIPRJLKVLRWCWUODQH

XL
LNUDWQAYBSMCBQVAAKKZFNF

  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  

Decrypted:

FROM ITERTOOLS IMPORT CYCLE   YOU MUST USE THIS FOR ROTATING THE WHEELS.
FROM FUNCTOOLS IMPORT REDUCE  YOU MUST USE THIS TO TURN  BITS INTO AN INT.
FROM RANDOM IMPORT CHOICE     YOU MUST USE THIS TO MAKE THE WHEEL PATTERNS.
FROM COPY IMPORT DEEPCOPY     YOU MUST USE THIS FOR COPYING WHEELS FOR RESET.

START  TRUE                  USE THIS TO TELL LORENZ TO RESET ITS WHEELS.

SZS,,,,,,,,,,,THESE ARE THE  LORENZ WHEEL SIZES.
 TO EXPLAIN ABOUT THESE  WHEELS, THE FIRST FIVE WHEELS CREATE BIT NUMBER
 CALLED "PSI", AND THE LAST WHEELS CREATE A BIT NUMBER CALLED "CHI". THESE
 PSI AND CHI VALUES ARE XORED TOGETHER TO CREATE THE KEY.
 THE MIDDLE TWO WHEELS ARE CALLED "MU" AND "MU". THEY ARE USED TO DEFINE
 WHEN THE "CHI" WHEELS ARE ALLOWED TO ROTATE. THEY WILL BE DESCRIBED LATER.


DEF LORENZ
   """THIS FUNCTION GENERATES AN INTEGER FROM  TO  IE, A BIT INTEGER.
   THIS INTEGER IS GENERATED BY A LORENZ MACHINE, FOR USE IN XOR ENCRIPTION.

   THERE IS ALSO A GLOBAL VARIABLE NAMED START. WHEN IT IS TRUE, THE WHEELS
   ARE ALL EITHER INITIALIZED OR ELSE RESET TO THEIR INITIAL VALUES. ALSO,
   WHEN THIS HAPPENS THE START VARIABLE GET AUTOMATICALLY SET TO FALSE."""
   WHEELS
   WHILE 
        SOMETHING IS NEEDED HERE, TO ALLOW "START" TO BE WRITTENTO.
      IF  THIS TEST FOR WHETHER THE WHEELS NEED TO BE INITIALIZED.
         FOR SZ IN SZS
             THIS USES COMPREHENSION, APPEND, CYCLE AND CHOICE.
                   USE CYCLE TO MAKE THE ITERATOR CYCLE LIKE A WHEEL.
                   USE CHOICE TO CHOOSE BITS RANDOMLY AS EITHER  OR .
                   USE LIST COMPREHENSION TO PUT THE BITS AROUND THE WHEEL.
                   USE APPEND TO ADD THIS WHEEL INTO THE LIST OF  WHEELS.
                   
         CHI THIS USES NEXT, COMPREHENSION, REDUCE, AND LAMBDA.
                   USE NEXT TO GET A VALUE AND ROTATE WHEEL I.
                   USE LIST COMPREHENSION TO TAKE I FROM  TO  IE, CHI.
                   USE REDUCE TO CONCATENATE THE LIST OF  BITS INTO  INT.
                   USE LAMBDA TO GET A FUNCTION TO DOUBLE ARG AND ADD ARG. 

         WHEELSCOPY THIS MAKES A DEEP COPY OF WHEELS.
         CHICOPYCHI
      ELIF START  THIS INDICATE A RESET IE, TIME TO START DECODING.
         WHEELS THIS MAKES A DEEP COPY OF WHEELSCOPY.
         CHICHICOPY
          IN THE CASE OF RESETTING THE WHEEL, A "NONE" KEY IS YIELDED.
      START  FALSE
      
      PSI THIS IS LIKE THE "CHI" LINE ABOVE, BUT FOR WHEELS  TO .
                NOTE THIS "PSI" WIL CAUSE THE PSI WHEEL TO ALWAYS SPIN.

      AS JUST SEEN ABOVE, THE PSI WHEEL ALWAYS SPINS.
      BUT NOW, FOR THE CHI WHEEL, THE DECISION OF WHETHER TO SPIN IS HANDLED
      BY THE WHEELS    IE, THE TH AND TH, IE, MU  MU.
       AS FOR MU, IT ALWAYS SPINS.
       AS FOR MU, IT ONLY SPINS IF MUS NEWLYSPUN VALUE IS A .
       AS FOR THE  CHI WHEELS, THEY ONLY SPINS IF MUS NEW VALUE IS A .
      
      IF THIS LINE USES NEXT TO SPIN THE TH WHEEL AND SIMULTANEOUSLY
                 USES EXPRESSION ASSIGNMENT TO PUT THAT NEXT VALUE INTO MU.
         IF A SIMILAR USE OF NEXTEXPRESSION ASSIGNMENT, BUT FOR MU. 
            CHI THIS IS IDENTICAL TO THE "CHI" LINE UP ABOVE.
        THIS YIELDS THE EXCLUSIVEORING OF THE INTEGERS PSI AND CHI.


DEF ENCS
   """THE LORENZ CIPHER CAN ONLY ENCODE  BITS, OR  VALUES. SO THE ENCODING
   WILL BE A OR A  , B OR B  , Z OR Z  ,    , .  ,
   ,  , "  , ?  , N  , AND ANYTHINGELSE  .

   NOTE THIS WASNT THE ENCODING USED BY THE ACTUAL LORENZ CYPHER.
   NOTE THIS ENC FUNCTION IS FOR ENCODING, NOT ENCRYPTION. THAT IS IT
         RETURN THE INTEGER CODE FOR THE PASSEDIN CHARACTER STRING."""
   IF  CHECKS IF S IS A LETTER IE, A, OR A, OR B, OR ...
      RETURN  A OR A  , B OR B  , Z OR Z  .
   ELSE
      RETURN     , .  , ,  , "  ,
                      ?  , N  , AND ANYTHINGELSE  .
   
DEF DECVRETURN  THIS REVERSES ENC. BUT IT USES A CONDITIONAL
                         EXPRESSION TO IMPLEMENT IT ALL ON ONE LINE.

KEY  THIS INITIALIZE THE LORENZ GENERATOR.
F    THIS OPENS THE FILE PATEMPLATE.PY.
TEXT  THIS READS THE ENTIRE PATEMPLATE.PY INTO A STRING.

PRINT"ENCRYPTEDN"
PRINT"".JOINTHIS USES MAP, DEC, EXPRESSION ASSIGNMENT, ENC,
                    , NEXT, AND LIST COMPREHENSION WITH A FOR AND AN IF
                    INSIDE THE COMPREHENSION. THE IF IS USED IN ORDER TO
                    REMOVE ANY DISALLOWED CHARACTERS THE INPUT  MEANING
                    ANY CHARACTERS FOR WHICH ENC RETURNED .
                    
                    AS FOR THE EXPRESION ASSIGNMENT, ITS USED TO CATCH THE
                    ENCRYPTED NUMBERS. THAT IS WE CATCH THEM WHILE THEY ARE
                    STILL NUMBERS IE, BEFORE THEY DECODE INTO CHARACTERS.
                    
                    THE RESULT OF ALL THIS IS TO DISPLAY GARBLED TEXT.
                    
START  TRUENEXTKEY I DID THIS FOR YOU. IT RESET THE WHEEL FOR DECRYPT.

PRINT"N","  ","NNDECRYPTEDN"
PRINT"".JOINTHIS USES MAP, LAMBDA, DEC, , NEXT, AND THE LIST OF
                    ENCRYPTED NUMBERS CAUGHT ON THE PREVIOUS PRINT LINE.
                    
                    THE RESULT OF ALL THIS IS TO DISPLAY THE ORIGINAL TEXT,
                    BUT WIH ALL ILLEGAL CHARACTERS REMOVED.


%
% (You'll get a different encrypted text because the wheel bits are random.)
